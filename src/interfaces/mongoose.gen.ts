/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from 'mongoose'

/**
 * Lean version of ActivityDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ActivityDocument.toObject()`. To avoid conflicts with model names, use the type alias `ActivityObject`.
 * ```
 * const activityObject = activity.toObject();
 * ```
 */
export type Activity = {
    distance: number
    elapsedTime: number
    elevationGain?: number
    movingTime?: number
    date: string
    localDate: string
    timezone: string
    offset: number
    _id: mongoose.Types.ObjectId
}

/**
 * Lean version of ActivityDocument (type alias of `Activity`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Activity } from "../models"
 * import { ActivityObject } from "../interfaces/mongoose.gen.ts"
 *
 * const activityObject: ActivityObject = activity.toObject();
 * ```
 */
export type ActivityObject = Activity

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type ActivityQuery = mongoose.Query<any, ActivityDocument, ActivityQueries> & ActivityQueries

/**
 * Mongoose Query helper types
 *
 * This type represents `ActivitySchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type ActivityQueries = {}

export type ActivityMethods = {}

export type ActivityStatics = {}

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Activity = mongoose.model<ActivityDocument, ActivityModel>("Activity", ActivitySchema);
 * ```
 */
export type ActivityModel = mongoose.Model<ActivityDocument, ActivityQueries> & ActivityStatics

/**
 * Mongoose Schema type
 *
 * Assign this type to new Activity schema instances:
 * ```
 * const ActivitySchema: ActivitySchema = new mongoose.Schema({ ... })
 * ```
 */
export type ActivitySchema = mongoose.Schema<ActivityDocument, ActivityModel, ActivityMethods>

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Activity = mongoose.model<ActivityDocument, ActivityModel>("Activity", ActivitySchema);
 * ```
 */
export type ActivityDocument = mongoose.Document<mongoose.Types.ObjectId, ActivityQueries> &
    ActivityMethods & {
        distance: number
        elapsedTime: number
        elevationGain?: number
        movingTime?: number
        date: string
        localDate: string
        timezone: string
        offset: number
        _id: mongoose.Types.ObjectId
    }

/**
 * Lean version of ChallengeIntervalDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ChallengeDocument.toObject()`.
 * ```
 * const challengeObject = challenge.toObject();
 * ```
 */
export type ChallengeInterval = {
    start: string
    end: string
    scoringMetric: string
    requirements?: Map<string, string>
}

/**
 * Lean version of ChallengeDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ChallengeDocument.toObject()`. To avoid conflicts with model names, use the type alias `ChallengeObject`.
 * ```
 * const challengeObject = challenge.toObject();
 * ```
 */
export type Challenge = {
    name: string
    start: string
    end: string
    type: string
    intervalType: string
    intervals: ChallengeInterval[]
    _id: mongoose.Types.ObjectId
}

/**
 * Lean version of ChallengeDocument (type alias of `Challenge`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Challenge } from "../models"
 * import { ChallengeObject } from "../interfaces/mongoose.gen.ts"
 *
 * const challengeObject: ChallengeObject = challenge.toObject();
 * ```
 */
export type ChallengeObject = Challenge

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type ChallengeQuery = mongoose.Query<any, ChallengeDocument, ChallengeQueries> & ChallengeQueries

/**
 * Mongoose Query helper types
 *
 * This type represents `ChallengeSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type ChallengeQueries = {}

export type ChallengeMethods = {}

export type ChallengeStatics = {}

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Challenge = mongoose.model<ChallengeDocument, ChallengeModel>("Challenge", ChallengeSchema);
 * ```
 */
export type ChallengeModel = mongoose.Model<ChallengeDocument, ChallengeQueries> & ChallengeStatics

/**
 * Mongoose Schema type
 *
 * Assign this type to new Challenge schema instances:
 * ```
 * const ChallengeSchema: ChallengeSchema = new mongoose.Schema({ ... })
 * ```
 */
export type ChallengeSchema = mongoose.Schema<ChallengeDocument, ChallengeModel, ChallengeMethods>

/**
 * Mongoose Subdocument type
 *
 * Type of `ChallengeDocument["intervals"]` element.
 */
export type ChallengeIntervalDocument = mongoose.Types.Subdocument & {
    start: string
    end: string
    scoringMetric: string
    requirements?: mongoose.Types.Map<string>
}

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Challenge = mongoose.model<ChallengeDocument, ChallengeModel>("Challenge", ChallengeSchema);
 * ```
 */
export type ChallengeDocument = mongoose.Document<mongoose.Types.ObjectId, ChallengeQueries> &
    ChallengeMethods & {
        name: string
        start: string
        end: string
        type: string
        intervalType: string
        intervals: mongoose.Types.DocumentArray<ChallengeIntervalDocument>
        _id: mongoose.Types.ObjectId
    }

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
    return doc instanceof mongoose.Document
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
    [ref in T]: Root[T] extends mongoose.Types.Array<infer U>
        ? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
        : Exclude<Root[T], mongoose.Types.ObjectId>
}

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
    ? PopulatedProperty<DocType, T>
    : ParentProperty<T> extends keyof DocType
    ? Omit<DocType, ParentProperty<T>> & {
          [ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<infer U>
              ? mongoose.Types.Array<
                    ChildProperty<T> extends keyof U
                        ? PopulatedProperty<U, ChildProperty<T>>
                        : PopulatedDocument<U, ChildProperty<T>>
                >
              : ChildProperty<T> extends keyof DocType[ParentProperty<T>]
              ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
              : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>
      }
    : DocType

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T
type Modify<T, R> = Omit<T, keyof R> & R

/**
 * Augment mongoose with Query.populate overloads
 */
declare module 'mongoose' {
    interface Query<ResultType, DocType, THelpers = {}> {
        populate<T extends string>(
            path: T,
            select?: string | any,
            model?: string | Model<any, THelpers>,
            match?: any
        ): Query<
            ResultType extends Array<DocType>
                ? Array<PopulatedDocument<Unarray<ResultType>, T>>
                : ResultType extends DocType
                ? PopulatedDocument<Unarray<ResultType>, T>
                : ResultType,
            DocType,
            THelpers
        > &
            THelpers

        populate<T extends string>(
            options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>
        ): Query<
            ResultType extends Array<DocType>
                ? Array<PopulatedDocument<Unarray<ResultType>, T>>
                : ResultType extends DocType
                ? PopulatedDocument<Unarray<ResultType>, T>
                : ResultType,
            DocType,
            THelpers
        > &
            THelpers
    }
}
